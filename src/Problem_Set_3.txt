2.
    a. The strings the CFG recognizes a balanced set of zeroes and ones.
    b. "0110"
    c. 0       0
      /       / \
     1       1   1
    / \     /
  1    0   0

4.
    a. The memory value of i is 5. The memory value of j is 8. i's value is changed
       to 2 + 5 * 8 (42). The final value of i is 42. The final value of j is 8.

    b. The memory value of i is 3. The memory value of j is 8. If the value of
       i times 3 is greater than the value j, then i is changed to 3 times j, otherwise
       j is set to the value of 3 times i. The final memory value of i is 24 ( 3 times 8).
       The final value of j is 8.

    c. The memory value of i is 1. The memory value of j is 10. While the value
       of 3 times the value of i is less than or equal to the value of j, set the
       value of i to 3 times the current value of i. The final memory value of
       i is 9. The final memory value of j is 10.

9. A formula for the evaluation of k twices of successor 0 is:

   sigma 2^k from k=1 to infinity.

10. FSharp is left-associative, so first FSharp determines that a function that
    takes f as a parameter of type 'a is to be expected. Next, Fsharp determines that the
    first call to function f returns a type 'b. The next step is a
    sub-call to f as well, so f must take a type 'a and return a type 'a. Next,
    FSharp performs the same inspection of the second f function, thus determining
    the same typing: a function f takes a parameter 'a and returns an 'a type.
    Finally, FSharp determines that the inner call to function f is of type float,
    meaning input and output should be of type float since no other hints
    are specified. Finally, FSharp takes typings to mean that the lambda
    function is of type f:(float -> float) -> float.

14. Using the example code provided in 'problem_14.c', the type derivation is
    as follows:
        int *x is a pointer to an address space that is the size of an int.
        int a[15] is a sized array of 15 integers.

        *x = 7 sets the value of what x points to (an integer) to 7.
        a[*x] = *x + 4 sets the value of array a at index 7 to 7 plus 4 (11).

    Using my example code, the assignments are confirmed to work correctly.

15. The first example of `mrev` is not valid because it violates FSharp's typing
  system. By being of too generic a type, the FSharp compiler cannot infer the
  typings that are requested by the function and cannot guarantee further static
  type checking against the function. For example, the '_a list type presented does
  not describe the side effects of presenting an empty list to the function followed
  by a list with valid, but different, types. The second function definition
  allows FSharp's compiler to recognize proper types that are given to the `mrev`
  function and provides type soundness for the use of `mrev`

============================= HW 3 Elaboration ================================

2.
  a. First, Fsharp determines that fun f must be of type 'a. Next, FSharp determines that
     the return type of the function must be of type 'b. Next, FSharp looks
     at the match statement to determine what the resultant of the expression
     will be. FSharp finds that the return type of all arms of the match statement
     is an integer and determines that the type is int -> int.
  b. Fsharp first determines that x must be of type 'a. Next, Fsharp looks at the function
    declaration to determine that x must be of type 'a list to use the append operator.
    Finally, Fsharp determines that the return type is also of type 'a list, thus
    making the type of the function x: 'a list -> ('a list -> 'a list).
  c. First, FSharp determines that fun x must be of type 'a. Next, FSharp determines that 'a must
     be an int to satisfy the appending of 5 to x. Finally, FSharp determines that the function
     takes an input parameter of type int and returns an int list.
  d. First, FSharp determines that f takes a parameter of type 'a. Next, FSharp
     looks inside the function to determine that 'a must be of type int for its return
     type. Next, FSharp looks at how function f is applied to "cat", which means that
     function f must be take a value of type string to work correctly with String.length.
     Finally, FSharp determines that function is of type (string -> string) -> int.
  e. First, FSharp looks at the function declaration and determines that x must be of
     type 'a and y must be of type 'b. Next, FSharp looks at the function internals to
     determine that the returned value must be of type string as a concatenation of x and y
     is occurring with a string of a space value. Finally, FSharp determines that both
     x and y must be type string.
  f. First, FSharp determines that the input type of the function must be of type 'a. Next,
     FSharp looks at the internal types, finding that the applications of the type of 'a must
     accepts a type of string from "cat". Finally, FSharp determines that the typing of the function
     is (string -> string) -> string.

3.
  a. The time complexity of my tail-recursive Map function is log(n) since I use
     an accumulator-based recursive function for the map function and another
     tail-recursive reverse function to put the elements in the correct order.
4.
  a. The time complexity of the tail-recursive function is O(log(n)) while the non-tail-recursive is
     O(n)

6.
  a. (APP(SUCC, NUM 3))
  b. (IF(BOOL true, FUN(NUM 3, APP(SUCC, NUM 3)), FUN("b", APP(SUCC, NUM 3))))
